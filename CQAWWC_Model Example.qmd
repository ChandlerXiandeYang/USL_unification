---
title: "CQAWWC_Model"
author: XY WL MC
format: docx
editor: visual
---

```{r Ppu_KDEDPonUSLND}
#| echo: False
#| message: False
#| warning: False

#knitr::include_graphics("Histogram_combined.png")
package_vector <- c("quarto", "rmarkdown", "shiny", "rlang", "tidyr", "DBI", "odbc", "openxlsx", "dplyr", "knitr", 
                    "stringr", "ggplot2", "forcats", "readxl", "formattable", "easyanova", "VCA", "qcc", "lubridate", 
                    "kableExtra", "lme4", "AER", "dunn.test", "boot", "lmtest", "gridExtra", "magick", "gt", 
                    "webshot2", "chromote",  "DiagrammeR", "DiagrammeRsvg", "rsvg")

#"CleaningValidation",
check_and_install <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, dependencies = TRUE, repos = "https://cran.r-project.org")
    require(pkg, character.only = TRUE)
  }
}

lapply(package_vector, require, character.only=T)

Eq_DAR <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_DAR.xlsx")
Eq_CAR <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_CAR.xlsx")
Eq_Mic <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_Mic.xlsx")
Eq_DAR_20 <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_DAR_20.xlsx")
Eq_DAR_169 <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_DAR_169.xlsx")
Eq_DAR_122 <- read_excel("C:\\Users\\xyang1\\AAPSPharmSciTech\\USL_unification-main\\Equipment A\\Eq_DAR_122.xlsx")


Ppu_KDEDPonUSLND <- function(data, Residue, USL, BW = "Silver1.06") {
  library(dplyr)
  library(rlang)
  residue_quo <- enquo(Residue)
  usl_quo <- enquo(USL)
  data_clean <- data %>%
    filter(!is.na(!!residue_quo), !is.na(!!usl_quo)) %>%
    mutate(Residue_Pct = (!!residue_quo / !!usl_quo) * 100)
  
  if (nrow(data_clean) == 0) stop("No valid rows remaining after removing NAs in Residue or USL.")
   x <- data_clean$Residue_Pct
  n <- length(x)
  s <- sd(x)
  if (is.character(BW)) {
    BW <- match.arg(BW, choices = c("Silver1.06", "Silver0.9", "Silver0.9IQR"))
    h <- switch(BW,
                "Silver1.06" = 1.06 * s / n^(1/5),
                "Silver0.9" = 0.9 * s / n^(1/5),
                "Silver0.9IQR" = {
                  iqr_val <- IQR(x)
                  sigma <- min(s, iqr_val / 1.34)
                  0.9 * sigma / n^(1/5)
                })
    bw_method <- BW
  } else if (is.numeric(BW) && length(BW) == 1 && BW > 0) {
    h <- BW
    bw_method <- "User-defined"
  } else {
    stop("BW must be numeric > 0 or one of: 'Silver1.06', 'Silver0.9', 'Silver0.9IQR'.")
  }
  
  kde <- density(x, bw = h, n = 2^20)
  fx <- kde$y
  x_vals <- kde$x
  dx <- diff(x_vals)[1]
  Fx <- cumsum(fx) * dx
  Fx <- Fx / max(Fx)
  inv_cdf <- approxfun(Fx, x_vals, rule = 2)
  P0.5 <- inv_cdf(0.5)
  P0.99865 <- inv_cdf(0.99865)
  Ppu <- (100 - P0.5) / (P0.99865 - P0.5)
  
  df_result <- data.frame(
    Ppu = round(Ppu, 3),
    P0.5 = round(P0.5, 3),
    P0.99865 = round(P0.99865, 3),
    N = n,
    Sample_SD = round(s, 3),
    Bandwidth_Method = bw_method,
    Bandwidth_Value = round(h, 5)
  )
  
  return(df_result)
}
```

```{r Ppu_BAKDEDPonUSLND}
#| echo: False
#| message: False
#| fig-pos: 'H'
#| warning: False
Ppu_BAKDEDPonUSLND <- function(data, Residue, USL, BW = "Silver1.06", n_boot = 1000, conf_level = 0.95, seed = 1234) {
  library(rlang)
  
  Residue_enquo <- enquo(Residue)
  USL_enquo <- enquo(USL)
  set.seed(seed)
  ppu_full <- Ppu_KDEDPonUSLND(data, !!Residue_enquo, !!USL_enquo, BW)$Ppu
  n <- nrow(data)
  
  ppu_boot <- numeric(n_boot)
  
  for (i in seq_len(n_boot)) {
    data_boot <- data[sample(seq_len(n), size = n, replace = TRUE), ]
    ppu_boot[i] <- tryCatch({
      Ppu_KDEDPonUSLND(data_boot, !!Residue_enquo, !!USL_enquo, BW)$Ppu
    }, error = function(e) NA_real_)
  }
  ppu_boot <- ppu_boot[!is.na(ppu_boot)]
  alpha <- (1 - conf_level)
  cil <- quantile(ppu_boot, probs = alpha / 2, names = FALSE)
  ciu <- quantile(ppu_boot, probs = 1 - alpha / 2, names = FALSE)
  result_df <- data.frame(
    Ppu = ppu_full,
    CI_lower = cil,
    CI_upper = ciu,
    conf_level = conf_level,
    n_boot = length(ppu_boot),
    stringsAsFactors = FALSE
  )
  
  return(result_df)
}
```

```{r Ppu_CQAWWC_KDEDPonUSLND}
#| echo: False
#| message: False
#| fig-pos: 'H'
#| warning: False
Ppu_CQAWWC_KDEDPonUSLND <- function(data1, Residue1, USL1,
                                    data2 = NULL, Residue2 = NULL, USL2 = NULL,
                                    data3 = NULL, Residue3 = NULL, USL3 = NULL,
                                    BW = "Silver1.06") {
  ppu_named <- c()

  ppu1 <- Ppu_KDEDPonUSLND(data1, {{ Residue1 }}, {{ USL1 }}, BW)$Ppu
  ppu_named <- c(ppu_named, Ppu_Data1 = ppu1)

  if (!is.null(data2) && !rlang::quo_is_null(rlang::enquo(Residue2)) && !rlang::quo_is_null(rlang::enquo(USL2))) {
    ppu2 <- Ppu_KDEDPonUSLND(data2, {{ Residue2 }}, {{ USL2 }}, BW)$Ppu
    ppu_named <- c(ppu_named, Ppu_Data2 = ppu2)
  }

  if (!is.null(data3) && !rlang::quo_is_null(rlang::enquo(Residue3)) && !rlang::quo_is_null(rlang::enquo(USL3))) {
    ppu3 <- Ppu_KDEDPonUSLND(data3, {{ Residue3 }}, {{ USL3 }}, BW)$Ppu
    ppu_named <- c(ppu_named, Ppu_Data3 = ppu3)
  }

  min_ppu <- min(ppu_named, na.rm = TRUE)

  output <- as.data.frame(as.list(c(Ppu = min_ppu, ppu_named)))
  
  return(output)
}

```

```{r Ppu_CQAWWC_BAKDEDPonUSLND}
#| echo: False
#| message: False
#| fig-pos: 'H'
#| warning: False
Ppu_CQAWWC_BAKDEDPonUSLND <- function(data1, Residue1, USL1,
                                      data2 = NULL, Residue2 = NULL, USL2 = NULL,
                                      data3 = NULL, Residue3 = NULL, USL3 = NULL,
                                      BW = "Silver1.06",
                                      n_boot = 1000,
                                      conf_level = 0.95,
                                      seed = NULL) {
  library(dplyr)
  library(rlang)
  
  if (!is.null(seed)) {
    set.seed(seed)
  }
  clean_data <- function(data, residue, usl) {
    residue_quo <- enquo(residue)
    usl_quo <- enquo(usl)
    
    data %>%
      filter(!is.na(!!residue_quo), !is.na(!!usl_quo))
  }
  data1_clean <- clean_data(data1, {{Residue1}}, {{USL1}})
  data2_clean <- if (!is.null(data2)) clean_data(data2, {{Residue2}}, {{USL2}}) else NULL
  data3_clean <- if (!is.null(data3)) clean_data(data3, {{Residue3}}, {{USL3}}) else NULL
  point_estimate_all <- Ppu_CQAWWC_KDEDPonUSLND(data1_clean, {{Residue1}}, {{USL1}},
                                                data2_clean, {{Residue2}}, {{USL2}},
                                                data3_clean, {{Residue3}}, {{USL3}},
                                                BW = BW)
  point_estimate <- point_estimate_all$Ppu
  bootstrap_ppus <- replicate(n_boot, {
    boot_data1 <- data1_clean %>% sample_n(size = nrow(data1_clean), replace = TRUE)
    boot_data2 <- if (!is.null(data2_clean)) data2_clean %>% sample_n(size = nrow(data2_clean), replace = TRUE) else NULL
    boot_data3 <- if (!is.null(data3_clean)) data3_clean %>% sample_n(size = nrow(data3_clean), replace = TRUE) else NULL
    
    tryCatch({
      res <- Ppu_CQAWWC_KDEDPonUSLND(boot_data1, {{Residue1}}, {{USL1}},
                                     boot_data2, {{Residue2}}, {{USL2}},
                                     boot_data3, {{Residue3}}, {{USL3}},
                                     BW = BW)
      res$Ppu  # extract minimal Ppu value only
    }, error = function(e) NA_real_)
  })
  
  bootstrap_ppus <- na.omit(bootstrap_ppus)
  alpha <- 1 - conf_level
  ci_lower <- quantile(bootstrap_ppus, probs = alpha / 2, names = FALSE)
  ci_upper <- quantile(bootstrap_ppus, probs = 1 - alpha / 2, names = FALSE)
  df_result <- data.frame(
    Ppu = round(point_estimate, 3),
    CI_lower = round(ci_lower, 3),
    n_boot = n_boot
  )
  
  return(df_result)
}

```

```{r CQAWWC_BAKDEDPonUSLND_CVStage3Monitoring}
#| echo: False
#| message: False
#| warning: False
CQAWWC_BAKDEDPonUSLND_CVStage3Monitoring <- function(
    data1, Residue1, USL1, Fiscal_Year1,
    data2 = NULL, Residue2 = NULL, USL2 = NULL, Fiscal_Year2 = NULL,
    data3 = NULL, Residue3 = NULL, USL3 = NULL, Fiscal_Year3 = NULL,
    Time_cut,
    CIL = NULL,
    BW = "Silver1.06",
    initial_boot = 1000,
    max_boot = 10000,
    conf_level = 0.95,
    seed = NULL
) {
  library(dplyr)
  
  if (!is.null(seed)) set.seed(seed)
  
  clean_na_residue <- function(data, residue_col) {
    data %>% filter(!is.na({{ residue_col }}))
  }
  
  split_by_fiscal_year <- function(data, fiscal_year_col, time_cut) {
    training <- data %>% 
      filter(!is.na({{ fiscal_year_col }})) %>%
      filter({{ fiscal_year_col }} < time_cut)
    
    testing <- data %>% 
      filter(!is.na({{ fiscal_year_col }})) %>%
      filter({{ fiscal_year_col }} >= time_cut)
    
    list(training = training, testing = testing)
  }
  
  split1 <- split_by_fiscal_year(data1, {{ Fiscal_Year1 }}, Time_cut)
  TrainingData1 <- clean_na_residue(split1$training, {{ Residue1 }})
  TestingData1 <- clean_na_residue(split1$testing, {{ Residue1 }})
  
  if (!is.null(data2)) {
    split2 <- split_by_fiscal_year(data2, {{ Fiscal_Year2 }}, Time_cut)
    TrainingData2 <- clean_na_residue(split2$training, {{ Residue2 }})
    TestingData2 <- clean_na_residue(split2$testing, {{ Residue2 }})
  } else {
    TrainingData2 <- NULL
    TestingData2 <- NULL
  }
  
  if (!is.null(data3)) {
    split3 <- split_by_fiscal_year(data3, {{ Fiscal_Year3 }}, Time_cut)
    TrainingData3 <- clean_na_residue(split3$training, {{ Residue3 }})
    TestingData3 <- clean_na_residue(split3$testing, {{ Residue3 }})
  } else {
    TrainingData3 <- NULL
    TestingData3 <- NULL
  }
  
  if (is.null(CIL) || CIL < 1) {
    ppu_ci_obj <- Ppu_CQAWWC_BAKDEDPonUSLND(
      data1 = TrainingData1, Residue1 = {{ Residue1 }}, USL1 = {{ USL1 }},
      data2 = TrainingData2, Residue2 = {{ Residue2 }}, USL2 = {{ USL2 }},
      data3 = TrainingData3, Residue3 = {{ Residue3 }}, USL3 = {{ USL3 }},
      BW = BW,
      n_boot = initial_boot,
      conf_level = conf_level,
      seed = seed
    )
    
    if (ppu_ci_obj$CI_lower < 1) {
      message("Initial CI lower bound < 1, increasing bootstrap to ", max_boot)
      ppu_ci_obj <- Ppu_CQAWWC_BAKDEDPonUSLND(
        data1 = TrainingData1, Residue1 = {{ Residue1 }}, USL1 = {{ USL1 }},
        data2 = TrainingData2, Residue2 = {{ Residue2 }}, USL2 = {{ USL2 }},
        data3 = TrainingData3, Residue3 = {{ Residue3 }}, USL3 = {{ USL3 }},
        BW = BW,
        n_boot = max_boot,
        conf_level = conf_level,
        seed = seed
      )
      if (ppu_ci_obj$CI_lower < 1) {
        warning("CIL still < 1 after ", max_boot, " bootstraps. Data quality or size may be insufficient.")
      }
    }
    CIL <- ppu_ci_obj$CI_lower
  } else {
    training_ppu <- Ppu_CQAWWC_KDEDPonUSLND(
      data1 = TrainingData1, Residue1 = {{ Residue1 }}, USL1 = {{ USL1 }},
      data2 = TrainingData2, Residue2 = {{ Residue2 }}, USL2 = {{ USL2 }},
      data3 = TrainingData3, Residue3 = {{ Residue3 }}, USL3 = {{ USL3 }},
      BW = BW
    )$Ppu
    
    ppu_ci_obj <- list(
      Ppu = training_ppu,
      CI_lower = CIL
      
    )
  }
  
  CombinedData1 <- bind_rows(TrainingData1, TestingData1)
  CombinedData2 <- if (!is.null(TrainingData2)) bind_rows(TrainingData2, TestingData2) else NULL
  CombinedData3 <- if (!is.null(TrainingData3)) bind_rows(TrainingData3, TestingData3) else NULL
  
  testing_ppu_result <- Ppu_CQAWWC_KDEDPonUSLND(
    data1 = CombinedData1, Residue1 = {{ Residue1 }}, USL1 = {{ USL1 }},
    data2 = CombinedData2, Residue2 = {{ Residue2 }}, USL2 = {{ USL2 }},
    data3 = CombinedData3, Residue3 = {{ Residue3 }}, USL3 = {{ USL3 }},
    BW = BW
  )
  
  Testing_Ppu <- testing_ppu_result$Ppu
  
  decision <- if (Testing_Ppu >= CIL) {
    "Cleaning process is capable."
  } else if (Testing_Ppu >= 1 && Testing_Ppu < CIL) {
    "Cleaning process is capable with low confidence — warning triggered."
  } else {
    "Cleaning process is NOT capable."
  }
  output <- data.frame(
    Ppu_training = ppu_ci_obj$Ppu,
    Ppu_threshold = CIL,
    Ppu_monitoring = Testing_Ppu,
    decision = decision
    
  )
  return(output)
}
```

```{r CQAWWC_Model_Application}
#| echo: False
#| message: False
#| warning: False
#| tbl-cap: Cleaning Process Overall Performance for Equipment A with USL-Normalized DAR, CAR, and Mic Data
CQAWWC_Model <- CQAWWC_BAKDEDPonUSLND_CVStage3Monitoring(data1=Eq_DAR, Residue1=DAR, USL1=USL,Fiscal_Year1=Fiscal_Year,data2=Eq_CAR, Residue2=CAR, USL2=USL,Fiscal_Year2=Fiscal_Year,
data3=Eq_Mic, Residue3=Mic, USL3=USL,Fiscal_Year3=Fiscal_Year,Time_cut=2025, initial_boot = 500, seed=1234)
CQAWWC_Model
```
